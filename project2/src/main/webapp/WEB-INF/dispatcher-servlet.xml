<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
  	 http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<context:component-scan base-package="com.project" />
	<mvc:annotation-driven />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

	<!-- This produces a container-managed EntityManagerFactory; rather than 
		application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
	<bean id="entityManagerFactoryBean"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan" value="com.project.model" />
		<!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
			Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
			</props>
		</property>
	</bean>

	<!-- Simple implementation of the standard JDBC DataSource interface, configuring 
		the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/project_1" />
		<property name="username" value="nde" />
		<property name="password" value="$Digital0" />
	</bean>

	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
	</bean>
	
	<!-- bean per il servizio Mail, by Alessio -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	    <!-- SMTP settings -->
	    <property name="host" value="smtp.gmail.com" />
	    <property name="port" value="587" />
	    <property name="username" value="webimmobiliaredigital@gmail.com" />
	    <property name="password" value="$Digital0" />
	    <property name="javaMailProperties">
	        <!-- additional properties specific to JavaMail -->
	        <props>
	            <prop key="mail.transport.protocol">smtp</prop>
	            <prop key="mail.smtp.auth">true</prop>
	            <prop key="mail.smtp.starttls.enable">true</prop>
	        </props>
	    </property>
	</bean>
	


	<!-- responsible for registering the necessary Spring components that power 
		annotation-driven transaction management; such as when @Transactional methods 
		are invoked -->
	<tx:annotation-driven />

	<mvc:resources mapping="/assets/**" location="/assets/"></mvc:resources>

	<mvc:resources mapping="/css/**" location="/css/"></mvc:resources>
	<mvc:resources mapping="/font/**" location="/font/"></mvc:resources>
	<mvc:resources mapping="/ico/**" location="/ico/"></mvc:resources>
	<mvc:resources mapping="/img/**" location="/img/"></mvc:resources>
	<mvc:resources mapping="/js/**" location="/js/"></mvc:resources>
	<mvc:resources mapping="/skins/**" location="/skins/"></mvc:resources>
	
	<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources>
	

</beans>